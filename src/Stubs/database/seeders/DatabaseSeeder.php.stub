<?php

namespace Modules\{{ module }}\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Symfony\Component\Yaml\Yaml;

/**
 * Seeder for the {{ module }} module.
 *
 * This class seeds the database tables for the module.
 */
class {{ module }}DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run(): void
    {
        $permissionsPath = __DIR__ . '/../../config/permissions.yaml';
        if (!file_exists($permissionsPath)) {
            return;
        }

        $config = Yaml::parseFile($permissionsPath);
        $permissions = $config['permissions'] ?? [];
        $roles = $config['roles'] ?? [];

        // Create permissions
        foreach ($permissions as $name => $data) {
            DB::table('permissions')->updateOrInsert(
                ['name' => $name],
                [
                    'name' => $name,
                    'guard_name' => 'web',
                ]
            );
        }

        // Create roles and assign permissions
        foreach ($roles as $roleName => $roleData) {
            // Create or find the role
            $role = DB::table('roles')->where('name', $roleName)->first();
            if (!$role) {
                $roleId = DB::table('roles')->insertGetId([
                    'name' => $roleName,
                    'guard_name' => 'web',
                ]);
            } else {
                $roleId = $role->id;
            }

            // Clear existing permissions for this role
            DB::table('role_has_permissions')->where('role_id', $roleId)->delete();

            // Assign new permissions
            foreach ($roleData['permissions'] as $permission) {
                $permissionId = DB::table('permissions')
                    ->where('name', $permission)
                    ->value('id');
                
                if ($permissionId) {
                    DB::table('role_has_permissions')->insert([
                        'role_id' => $roleId,
                        'permission_id' => $permissionId,
                    ]);
                }
            }
        }
    }
} 