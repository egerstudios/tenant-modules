<?php

namespace Modules\{{ module }}\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\View;
use Symfony\Component\Yaml\Yaml;

abstract class BaseModuleServiceProvider extends ServiceProvider
{
    protected string $moduleName;
    protected string $moduleNameLower;

    public function __construct($app)
    {
        parent::__construct($app);
        $this->moduleName = class_basename($this);
        $this->moduleNameLower = strtolower($this->moduleName);
    }

    public function register(): void
    {
        // Register module config
        $this->mergeConfigFrom(
            module_path($this->moduleName, 'config/module.php'), $this->moduleNameLower
        );
    }

    public function boot(): void
    {
        // Register module routes
        $this->registerRoutes();

        // Register module navigation
        $this->registerNavigation();

        // Register module views
        $this->registerViews();

        // Register module commands
        $this->registerCommands();

        // Register module migrations
        $this->loadMigrationsFrom(module_path($this->moduleName, 'database/migrations'));

        // Register module translations
        $this->loadTranslationsFrom(module_path($this->moduleName, 'lang'), $this->moduleNameLower);

        // Auto-register Livewire components in this module
        if (class_exists(\Livewire\Livewire::class)) {
            $livewirePath = module_path($this->moduleName, 'Livewire');
            if (is_dir($livewirePath)) {
                foreach (glob($livewirePath . '/*.php') as $file) {
                    $class = 'Modules\\' . $this->moduleName . '\\Livewire\\' . basename($file, '.php');
                    \Livewire\Livewire::component(strtolower($this->moduleName) . '-' . strtolower(basename($file, '.php')), $class);
                }
            }
        }

        // Auto-discover Volt components
        if (function_exists('Volt\\discover')) {
            \Volt\discover(base_path("modules/{$this->moduleName}/resources/components"), $this->moduleNameLower);
        }
    }

    protected function registerNavigation(): void
    {
        $navigationPath = module_path($this->moduleName, 'config/navigation.yaml');
        if (file_exists($navigationPath)) {
            $navigation = Yaml::parseFile($navigationPath);
            app('navigation')->registerModuleNavigation($this->moduleName, $navigation['items']);
        }
    }

    protected function registerRoutes(): void
    {
        Route::group([
            'prefix' => $this->moduleNameLower,
            'middleware' => ['web','auth','tenant'],
            'namespace' => "Modules\\{$this->moduleName}\\Http\\Controllers",
        ], function () {
            $this->loadRoutesFrom(module_path($this->moduleName, 'routes/tenant.php'));
        });

        Route::group([
            'prefix' => 'api/' . $this->moduleNameLower,
            'middleware' => ['api'],
            'namespace' => "Modules\\{$this->moduleName}\\Http\\Controllers",
        ], function () {
            $this->loadRoutesFrom(module_path($this->moduleName, 'routes/api.php'));
        });
    }

    protected function registerViews(): void
    {
        View::addNamespace($this->moduleNameLower, module_path($this->moduleName, 'resources/views'));
    }

    protected function registerCommands(): void
    {
        if ($this->app->runningInConsole()) {
            $this->commands([
                // Register your module's commands here
            ]);
        }
    }
} 